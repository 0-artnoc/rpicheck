import nl.javadude.gradle.plugins.license.License

import java.util.regex.Pattern

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'net.researchgate:gradle-release:2.0.2'
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.11.0"
}

apply plugin: 'com.android.application'
apply plugin: 'net.researchgate.release'

if (project.hasProperty("rpicheck.keystore")
        && new File(project.property("rpicheck.keystore")).exists()) {
    // sign apk
    apply from: "gradle/signing.gradle";
    // copy signed apk to local release apk folder
    apply from: "gradle/release.gradle";
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "de.eidottermihi.raspicheck"
        minSdkVersion 9
        targetSdkVersion 22
    }

    buildTypes {
        debug {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        warning 'InvalidPackage', 'MissingTranslation'
    }
}

dependencies {
    compile project(':libraries:ssh')
    compile project(':libraries:file-explorer')
    compile 'de.larsgrefer:android-library:0.7.2'
    compile 'org.ocpsoft.prettytime:prettytime:2.1.2.Final'
    compile('com.github.tony19:logback-android-classic:1.1.1-3') {
        exclude group: 'com.google.android', module: 'android'
    }
    compile 'org.slf4j:slf4j-api:1.7.6'
    compile 'com.google.code.findbugs:jsr305:2.0.2'
}

// Update version string in version.xml
android.applicationVariants.all { variant ->
    variant.mergeResources.doLast {
        def versionName = project.version
        File valuesFile = file("${buildDir}/intermediates/res/${variant.dirName}/values/values.xml")
        println("Setting version \'$versionName\' in $valuesFile")
        String content = valuesFile.getText('UTF-8')
        content = content.replaceAll(/appversion/, versionName)
        valuesFile.write(content, 'UTF-8')
    }
}

release {
    tagPrefix = "v"
    // tagTemplate = "v$version"
}

task increaseVersionCode << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionCode = Integer.parseInt(matcher.group(1))
    def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
    manifestFile.write(manifestContent)
}

task updateVersionName << {
    Properties properties = new Properties()
    properties.load(file('gradle.properties').newDataInputStream())
    def newVersionName = properties.getProperty('version')
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"([^\"]+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    matcherVersionNumber.find()
    def mNextVersionName = newVersionName
    def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
    manifestFile.write(manifestContent)
}

tasks.commitNewVersion.dependsOn increaseVersionCode
tasks.commitNewVersion.dependsOn updateVersionName

license {
    header file('src/etc/license_header')

    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'RasPi Check Contributors'
}

task licenseFormatApp(type: License) {
    source = fileTree(dir: "src").include("**/*.java").exclude("**/sheetrock/panda/changelog/ChangeLog.java")
}
licenseFormat.dependsOn licenseFormatApp

