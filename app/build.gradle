import nl.javadude.gradle.plugins.license.License

import java.util.regex.Pattern

plugins {
    id "com.github.hierynomus.license" version "0.11.0"
    id "net.researchgate.release" version "2.0.2"
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "de.eidottermihi.raspicheck"
        minSdkVersion 9
        targetSdkVersion 22
        versionCode 28
        versionName "1.7.1"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        warning 'InvalidPackage', 'MissingTranslation'
    }
}

dependencies {
    compile project(':libraries:ssh')
    compile project(':libraries:file-explorer')
    compile 'de.larsgrefer:android-library:0.7.2'
    compile 'org.ocpsoft.prettytime:prettytime:2.1.2.Final'
    compile 'com.github.tony19:logback-android-classic:1.0.10-2'
    compile 'org.slf4j:slf4j-api:1.7.6'
}

release {
}

task('increaseVersionCode') << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionCode = Integer.parseInt(matcher.group(1))
    def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
    manifestFile.write(manifestContent)
}

task('incrementVersionName') << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def buildVersion = Integer.parseInt(matcherVersionNumber.group(4))
    def mNextVersionName = majorVersion + "." + minorVersion + "." + pointVersion + "." + (buildVersion + 1)
    def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
    manifestFile.write(manifestContent)
}


tasks.whenTaskAdded { task ->
    if (task.name == 'generateReleaseBuildConfig') {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'incrementVersionName'
    }
}

license {
    header file('src/etc/license_header')

    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'RasPi Check Contributors'
}

task licenseFormatApp(type: License) {
    source = fileTree(dir: "src").include("**/*.java").exclude("**/sheetrock/panda/changelog/ChangeLog.java")
}
licenseFormat.dependsOn licenseFormatApp

